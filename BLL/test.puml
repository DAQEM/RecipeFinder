@startuml

skinparam LineType ortho

package "Business Logic Layer" as BLL {
    interface ICookRepository {
        +GetAll(): List<Cook>
        +GetById(id: Guid): Cook
        +Add(cook: Cook): void
        +Update(cook: Cook): void
        +Delete(cook: Cook): void
    }
    
    class CookService {
        -cookRepository: ICookRepository
        +CookService(cookRepository: ICookRepository)
        +GetAllCooks(): List<Cook>
        +GetCookById(id: Guid): Cook
        +AddCook(cook: Cook): void
        +UpdateCook(cook: Cook): void
        +DeleteCook(cook: Cook): void
    }
    
    class Cook {
        +Guid Id
        +string UserName
        +string FullName
        +string ImageUrl
        +DateTime CreatedAt
    }
}

package "Data Access Layer" as DAL {
    class CookRepository implements ICookRepository {
        -cooks: List<Cook>
        +GetAll(): List<Cook>
        +GetById(id: Guid): Cook
        +Add(cook: Cook): void
        +Update(cook: Cook): void
        +Delete(cook: Cook): void
    }
}

package "Presentation Layer" as PRES {
    class CookController {
        -cookService: CookService
        +CookController(cookService: CookService)
        +GetAll(): Response
        +GetById(id: Guid): Response
        +Add(cook: Cook): Response
        +Update(cook: Cook): Response
        +Delete(cook: Cook): Response
    }
}

package "Data Access Factory" as DAF {
    class CookDataFactory {
        -cookService: CookService
        +GetAll(): List<Cook>
        +GetById(id: Guid): Cook
        +Add(cook: Cook): void
        +Update(cook: Cook): void
        +Delete(cook: Cook): void
    }
}

CookService --> ICookRepository
CookController ---> CookDataFactory
CookDataFactory --> CookService

@enduml